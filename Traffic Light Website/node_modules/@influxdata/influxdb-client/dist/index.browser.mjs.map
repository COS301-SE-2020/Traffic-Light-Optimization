{"version":3,"file":"index.browser.mjs","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/Point.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/pureJsChunkCombiner.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/observable/symbol.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["import {Transport} from './transport'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write  */\n  minRetryDelay: number\n  /** maximum delay when retrying write  */\n  maxRetryDelay: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by [[WriteApi]] .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 1000,\n  maxRetryDelay: 15000,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  maxRetries: 2,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by [[InfluxDB]] .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a [[Point]] is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error reason for retrying\n   * @return milliseconds\n   */\n  nextDelay(error?: Error): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @return  0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error to know whether a possible HTTP call can be retried.\n * @param error Test whether the givver e\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(chars: string[], private wrap: string = '') {\n    const patterns = chars.join('').replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      escapedVal += val.slice(chunkIndex, match.index) + escapeChar + match[0]\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(new Escaper([',', ' '])),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(new Escaper(['\"', '\\\\\\\\'], '\"')),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(new Escaper([',', '=', ' '])),\n}\n","import {WritePrecision} from '../options'\n\ndeclare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  [String(WritePrecision.s)]: seconds,\n  [String(WritePrecision.ms)]: millis,\n  [String(WritePrecision.us)]: micros,\n  [String(WritePrecision.ns)]: nanos,\n  seconds,\n  millis,\n  micros,\n  nanos,\n})\n\nexport const dateToProtocolTimestamp = {\n  [String(WritePrecision.s)]: (d: Date): string =>\n    `${Math.floor(d.getTime() / 1000)}`,\n  [String(WritePrecision.ms)]: (d: Date): string => `${d.getTime()}`,\n  [String(WritePrecision.us)]: (d: Date): string => `${d.getTime()}000`,\n  [String(WritePrecision.ns)]: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: identity,\n  long: identity,\n  double: (x: string): any => +x,\n  string: identity,\n  base64Binary: identity,\n  dateTime: identity,\n  duration: identity,\n}\n/**\n * Represents metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label table column or [[invalidColumn]]\n   */\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values values for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] || identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   * @return index\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue || ''\n    return retVal\n  }\n}\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines the values that will be written to the database.\n * See [Go Implementation](http://bit.ly/influxdata-point)\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName the measurement name\n   * @return new instance of {@link Point}\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name measurement name\n   * @return new instance of {@link Point}\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name  tag name\n   * @param value tag value\n   * @return this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field field name\n   * @param value field value\n   * @return this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value is used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value point time\n   * @return this\n   */\n  public timestamp(value: string | number | Date | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger new logger\n * @return previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return Math.min(\n        delay + Math.round(Math.random() * this.options.retryJitter),\n        this.options.maxRetryDelay\n      )\n    } else {\n      if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * 2, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy\n * @param options retry options\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to influx DB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error)\n              )\n              reject(error)\n            } else {\n              Logger.error(`Write to influx DB failed.`, error)\n              reject(error)\n            }\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(): Promise<void> {\n    await this.writeBuffer.flush()\n    return await this.retryBuffer.flush()\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): void {\n    this._clearFlushTimeout()\n    this.closed = true\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../transport'\n\nconst pureJsChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    const retVal = new Uint8Array(first.length + second.length)\n    retVal.set(first)\n    retVal.set(second, first.length)\n    return retVal\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    // see https://en.wikipedia.org/wiki/UTF-8 for details\n    let c1, c2, c3, c4\n    let out = ''\n    let i = start\n    while (i < end) {\n      c1 = chunk[i++]\n      switch (c1 >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c1)\n          break\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          c2 = chunk[i++]\n          out += String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f))\n          break\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          out += String.fromCharCode(\n            ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)\n          )\n          break\n        case 15:\n          // 1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          c4 = chunk[i++]\n          out += String.fromCodePoint(\n            ((c1 & 0x07) << 18) |\n              ((c2 & 0x3f) << 12) |\n              ((c3 & 0x3f) << 6) |\n              (c4 & 0x3f)\n          )\n          break\n      }\n    }\n    return out\n  },\n\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = new Uint8Array(end - start)\n    retVal.set(chunk.slice(start, end))\n    return retVal\n  },\n}\n\nexport default pureJsChunkCombiner\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Transport,\n  SendOptions,\n  CommunicationObserver,\n  Headers,\n} from '../../transport'\nimport pureJsChunkCombiner from '../pureJsChunkCombiner'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport Logger from '../Logger'\nimport {CLIENT_LIB_VERSION} from '../version'\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner = pureJsChunkCombiner\n  private defaultHeaders: {[key: string]: string}\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    if (callbacks && callbacks.useCancellable && !(options as any).signal) {\n      const controller = new AbortController()\n      const signal = controller.signal\n      callbacks.useCancellable({\n        cancel() {\n          controller.abort()\n        },\n        isCancelled() {\n          return signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          const headers: Headers = {}\n          response.headers.forEach((value: string, key: string) => {\n            const previous = headers[key]\n            if (previous === undefined) {\n              headers[key] = value\n            } else if (Array.isArray(previous)) {\n              previous.push(value)\n            } else {\n              headers[key] = [previous, value]\n            }\n          })\n          observer.responseStarted(headers)\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => observer.error(e))\n      .finally(() => observer.complete())\n  }\n  async request(path: string, body: any, options: SendOptions): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n\n    let data = undefined\n    try {\n      if (responseContentType.includes('json')) {\n        data = await response.json()\n      } else if (responseContentType.includes('text')) {\n        data = await response.text()\n      }\n    } catch (_e) {\n      // ignore\n      Logger.warn('Unable to read error body', _e)\n    }\n    if (status >= 300) {\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after')\n      )\n    }\n    return data\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    return fetch(`${this.connectionOptions.url}${path}`, {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    })\n  }\n}\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   * @param line\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line line\n   * @return\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(query: string, consumer: CommunicationObserver<string>): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(query: string, consumer: FluxResultObserver<string[]>): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  private createExecutor(query: string): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query,\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type || 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 client that uses HTTP API described in https://v2.docs.influxdata.com/v2.0/reference/api/ .\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport || new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates [[WriteApi]] for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket The destination bucket for writes.\n   * @param precision Timestamp precision for line items.\n   * @param writeOptions Custom write options.\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions || this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates [[QueryAPI]] for the supplied organization .\n   *\n   * @param org organization\n   * @return query api instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n"],"names":["DEFAULT_ConnectionOptions","timeout","DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","DEFAULT_WriteOptions","batchSize","flushInterval","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","[object Object]","message","super","setPrototypeOf","this","prototype","HttpError","statusMessage","body","retryAfter","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","canRetryHttpCall","error","canRetry","code","getRetryDelay","retVal","Math","round","random","RequestTimedOutError","AbortError","name","reEscape","Escaper","chars","wrap","patterns","join","replace","_re","RegExp","val","lastIndex","chunkIndex","escapedVal","match","exec","slice","index","length","bindEsc","e","escape","bind","measurement","quoted","tag","useProcessHrtime","use","lastMillis","Date","now","stepsInMillis","nanos","millis","String","substr","micros","seconds","floor","currentTime","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","dateTime","duration","FluxTableMetaData","columns","forEach","col","i","label","values","acc","column","defaultValue","dataType","FluxTableColumn","object","group","Boolean","Point","measurementName","value","tags","fields","isNaN","parseFloat","time","settings","fieldsLine","keys","sort","tagsLine","defaultTags","convertTime","undefined","line","toLineProtocol","JSON","stringify","provider","console","warn","Logger","RetryStrategyImpl","options","success","delay","min","currentDelay","max","RetryBuffer","maxLines","retryLines","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","Array","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","attempts","self","reject","send","sendOptions","addLines","nextDelay","add","records","point","points","writePoint","finally","remaining","close","key","pureJsChunkCombiner","second","Uint8Array","set","chunk","start","end","c1","c2","c3","c4","out","fromCharCode","fromCodePoint","FetchTransport","connectionOptions","defaultHeaders","User-Agent","token","path","callbacks","observer","state","data","complete","responseStarted","completeCommunicationObserver","useCancellable","signal","controller","AbortController","abort","isCancelled","aborted","fetch","response","previous","isArray","push","status","text","statusText","get","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","responseContentType","json","other","url","credentials","ChunksToLines","target","chunks","finished","bufferReceived","toUtf8String","cancellable","concat","c","copy","LineSplitter","reuse","_reuse","reusedValues","lastSplitLength","quoteCount","startIndex","count","getValue","substring","toLineObserver","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","startsWith","symbolObservable","Symbol","observable","QuerySubscription","executor","isClosed","cancel","noop","ObservableQuery","decorator","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","tableMeta","type","gzip","decorateRequest","dialect","accept-encoding","chunkCombiner","request","InfluxDB","_options","endsWith","TransportImpl"],"mappings":"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"}