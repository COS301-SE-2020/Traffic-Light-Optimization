export declare type ObserverNext<T> = (value: T) => void;
export declare type ObserverError = (e: any) => void;
export declare type ObserverComplete = () => void;
export interface Observer<T> {
    next: ObserverNext<T>;
    error: ObserverError;
    complete: ObserverComplete;
}
/**
 * An observable that aligns with the
 * [TC39 observable proposal](https://github.com/tc39/proposal-observable) and
 * can be consumed by other observable libraries like
 * [rxjs](https://github.com/ReactiveX/rxjs) or
 * [zen-observable](https://github.com/zenparsing/zen-observable).
 */
export interface Observable<T> {
    subscribe(): Subscription;
    subscribe(observer: Partial<Observer<T>>): Subscription;
    subscribe(next: ObserverNext<T>, error?: ObserverError, complete?: ObserverComplete): Subscription;
}
export interface Subscription {
    readonly closed: boolean;
    unsubscribe(): void;
}
//# sourceMappingURL=types.d.ts.map