{"version":3,"file":"influxdb.js","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/Point.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/pureJsChunkCombiner.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/version.ts","../src/impl/browser/FetchTransport.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/observable/symbol.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["import {Transport} from './transport'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write  */\n  minRetryDelay: number\n  /** maximum delay when retrying write  */\n  maxRetryDelay: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by [[WriteApi]] .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 1000,\n  maxRetryDelay: 15000,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  maxRetries: 2,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by [[InfluxDB]] .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a [[Point]] is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error reason for retrying\n   * @return milliseconds\n   */\n  nextDelay(error?: Error): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @return  0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error to know whether a possible HTTP call can be retried.\n * @param error Test whether the givver e\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(chars: string[], private wrap: string = '') {\n    const patterns = chars.join('').replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      escapedVal += val.slice(chunkIndex, match.index) + escapeChar + match[0]\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(new Escaper([',', ' '])),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(new Escaper(['\"', '\\\\\\\\'], '\"')),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(new Escaper([',', '=', ' '])),\n}\n","import {WritePrecision} from '../options'\n\ndeclare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  [String(WritePrecision.s)]: seconds,\n  [String(WritePrecision.ms)]: millis,\n  [String(WritePrecision.us)]: micros,\n  [String(WritePrecision.ns)]: nanos,\n  seconds,\n  millis,\n  micros,\n  nanos,\n})\n\nexport const dateToProtocolTimestamp = {\n  [String(WritePrecision.s)]: (d: Date): string =>\n    `${Math.floor(d.getTime() / 1000)}`,\n  [String(WritePrecision.ms)]: (d: Date): string => `${d.getTime()}`,\n  [String(WritePrecision.us)]: (d: Date): string => `${d.getTime()}000`,\n  [String(WritePrecision.ns)]: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: identity,\n  long: identity,\n  double: (x: string): any => +x,\n  string: identity,\n  base64Binary: identity,\n  dateTime: identity,\n  duration: identity,\n}\n/**\n * Represents metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label table column or [[invalidColumn]]\n   */\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values values for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] || identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   * @return index\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue || ''\n    return retVal\n  }\n}\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines the values that will be written to the database.\n * See [Go Implementation](http://bit.ly/influxdata-point)\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName the measurement name\n   * @return new instance of {@link Point}\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name measurement name\n   * @return new instance of {@link Point}\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name  tag name\n   * @param value tag value\n   * @return this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field field name\n   * @param value field value\n   * @return this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value is used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value point time\n   * @return this\n   */\n  public timestamp(value: string | number | Date | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger new logger\n * @return previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return Math.min(\n        delay + Math.round(Math.random() * this.options.retryJitter),\n        this.options.maxRetryDelay\n      )\n    } else {\n      if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * 2, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy\n * @param options retry options\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to influx DB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error)\n              )\n              reject(error)\n            } else {\n              Logger.error(`Write to influx DB failed.`, error)\n              reject(error)\n            }\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(): Promise<void> {\n    await this.writeBuffer.flush()\n    return await this.retryBuffer.flush()\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): void {\n    this._clearFlushTimeout()\n    this.closed = true\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../transport'\n\nconst pureJsChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    const retVal = new Uint8Array(first.length + second.length)\n    retVal.set(first)\n    retVal.set(second, first.length)\n    return retVal\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    // see https://en.wikipedia.org/wiki/UTF-8 for details\n    let c1, c2, c3, c4\n    let out = ''\n    let i = start\n    while (i < end) {\n      c1 = chunk[i++]\n      switch (c1 >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c1)\n          break\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          c2 = chunk[i++]\n          out += String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f))\n          break\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          out += String.fromCharCode(\n            ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)\n          )\n          break\n        case 15:\n          // 1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          c4 = chunk[i++]\n          out += String.fromCodePoint(\n            ((c1 & 0x07) << 18) |\n              ((c2 & 0x3f) << 12) |\n              ((c3 & 0x3f) << 6) |\n              (c4 & 0x3f)\n          )\n          break\n      }\n    }\n    return out\n  },\n\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = new Uint8Array(end - start)\n    retVal.set(chunk.slice(start, end))\n    return retVal\n  },\n}\n\nexport default pureJsChunkCombiner\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","export const CLIENT_LIB_VERSION = '1.3.0'\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Transport,\n  SendOptions,\n  CommunicationObserver,\n  Headers,\n} from '../../transport'\nimport pureJsChunkCombiner from '../pureJsChunkCombiner'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport Logger from '../Logger'\nimport {CLIENT_LIB_VERSION} from '../version'\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner = pureJsChunkCombiner\n  private defaultHeaders: {[key: string]: string}\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    if (callbacks && callbacks.useCancellable && !(options as any).signal) {\n      const controller = new AbortController()\n      const signal = controller.signal\n      callbacks.useCancellable({\n        cancel() {\n          controller.abort()\n        },\n        isCancelled() {\n          return signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          const headers: Headers = {}\n          response.headers.forEach((value: string, key: string) => {\n            const previous = headers[key]\n            if (previous === undefined) {\n              headers[key] = value\n            } else if (Array.isArray(previous)) {\n              previous.push(value)\n            } else {\n              headers[key] = [previous, value]\n            }\n          })\n          observer.responseStarted(headers)\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => observer.error(e))\n      .finally(() => observer.complete())\n  }\n  async request(path: string, body: any, options: SendOptions): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n\n    let data = undefined\n    try {\n      if (responseContentType.includes('json')) {\n        data = await response.json()\n      } else if (responseContentType.includes('text')) {\n        data = await response.text()\n      }\n    } catch (_e) {\n      // ignore\n      Logger.warn('Unable to read error body', _e)\n    }\n    if (status >= 300) {\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after')\n      )\n    }\n    return data\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    return fetch(`${this.connectionOptions.url}${path}`, {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    })\n  }\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   * @param line\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line line\n   * @return\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(query: string, consumer: CommunicationObserver<string>): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(query: string, consumer: FluxResultObserver<string[]>): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  private createExecutor(query: string): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query,\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type || 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 client that uses HTTP API described in https://v2.docs.influxdata.com/v2.0/reference/api/ .\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport || new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates [[WriteApi]] for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket The destination bucket for writes.\n   * @param precision Timestamp precision for line items.\n   * @param writeOptions Custom write options.\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions || this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates [[QueryAPI]] for the supplied organization .\n   *\n   * @param org organization\n   * @return query api instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n"],"names":["identity","TransportImpl"],"mappings":"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"}