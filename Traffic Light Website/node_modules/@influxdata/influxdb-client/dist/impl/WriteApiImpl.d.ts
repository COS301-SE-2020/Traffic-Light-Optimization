import WriteApi from '../WriteApi';
import { WritePrecision, PointSettings, WriteOptions } from '../options';
import { Transport } from '../transport';
import { RetryDelayStrategy } from '../errors';
import Point from '../Point';
import RetryBuffer from './RetryBuffer';
export default class WriteApiImpl implements WriteApi, PointSettings {
    private transport;
    private writeBuffer;
    private closed;
    private httpPath;
    private writeOptions;
    private sendOptions;
    private _timeoutHandle;
    private currentTime;
    private dateToProtocolTimestamp;
    retryBuffer: RetryBuffer;
    retryStrategy: RetryDelayStrategy;
    constructor(transport: Transport, org: string, bucket: string, precision: WritePrecision, writeOptions?: Partial<WriteOptions>);
    sendBatch(lines: string[], attempts: number): Promise<void>;
    private _clearFlushTimeout;
    writeRecord(record: string): void;
    writeRecords(records: ArrayLike<string>): void;
    writePoint(point: Point): void;
    writePoints(points: ArrayLike<Point>): void;
    flush(): Promise<void>;
    close(): Promise<void>;
    dispose(): void;
    defaultTags: {
        [key: string]: string;
    } | undefined;
    useDefaultTags(tags: {
        [key: string]: string;
    }): WriteApi;
    convertTime(value: string | number | Date | undefined): string | undefined;
}
//# sourceMappingURL=WriteApiImpl.d.ts.map