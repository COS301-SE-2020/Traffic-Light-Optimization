import { Observable, Observer, ObserverComplete, ObserverError, ObserverNext, Subscription } from '../observable';
import { CommunicationObserver } from '../transport';
export declare type QueryExecutor = (consumer: CommunicationObserver<string>) => void;
declare type Decorator<T> = (observer: Observer<T>) => Observer<string>;
export default class ObservableQuery<T> implements Observable<T> {
    private readonly executor;
    private readonly decorator;
    constructor(executor: QueryExecutor, decorator: Decorator<T>);
    subscribe(observerOrNext?: Partial<Observer<T>> | ObserverNext<T>, error?: ObserverError, complete?: ObserverComplete): Subscription;
}
export {};
//# sourceMappingURL=ObservableQuery.d.ts.map