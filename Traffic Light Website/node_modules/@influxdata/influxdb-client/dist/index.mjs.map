{"version":3,"file":"index.mjs","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/Point.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/node/nodeChunkCombiner.ts","../src/impl/version.ts","../src/impl/node/NodeHttpTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/observable/symbol.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["import {Transport} from './transport'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write  */\n  minRetryDelay: number\n  /** maximum delay when retrying write  */\n  maxRetryDelay: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by [[WriteApi]] .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 1000,\n  maxRetryDelay: 15000,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  maxRetries: 2,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by [[InfluxDB]] .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a [[Point]] is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error reason for retrying\n   * @return milliseconds\n   */\n  nextDelay(error?: Error): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @return  0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error to know whether a possible HTTP call can be retried.\n * @param error Test whether the givver e\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(chars: string[], private wrap: string = '') {\n    const patterns = chars.join('').replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      escapedVal += val.slice(chunkIndex, match.index) + escapeChar + match[0]\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(new Escaper([',', ' '])),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(new Escaper(['\"', '\\\\\\\\'], '\"')),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(new Escaper([',', '=', ' '])),\n}\n","import {WritePrecision} from '../options'\n\ndeclare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  [String(WritePrecision.s)]: seconds,\n  [String(WritePrecision.ms)]: millis,\n  [String(WritePrecision.us)]: micros,\n  [String(WritePrecision.ns)]: nanos,\n  seconds,\n  millis,\n  micros,\n  nanos,\n})\n\nexport const dateToProtocolTimestamp = {\n  [String(WritePrecision.s)]: (d: Date): string =>\n    `${Math.floor(d.getTime() / 1000)}`,\n  [String(WritePrecision.ms)]: (d: Date): string => `${d.getTime()}`,\n  [String(WritePrecision.us)]: (d: Date): string => `${d.getTime()}000`,\n  [String(WritePrecision.ns)]: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: identity,\n  long: identity,\n  double: (x: string): any => +x,\n  string: identity,\n  base64Binary: identity,\n  dateTime: identity,\n  duration: identity,\n}\n/**\n * Represents metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label table column or [[invalidColumn]]\n   */\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values values for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] || identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   * @return index\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue || ''\n    return retVal\n  }\n}\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines the values that will be written to the database.\n * See [Go Implementation](http://bit.ly/influxdata-point)\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName the measurement name\n   * @return new instance of {@link Point}\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name measurement name\n   * @return new instance of {@link Point}\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name  tag name\n   * @param value tag value\n   * @return this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field field name\n   * @param value field value\n   * @return this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value is used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value point time\n   * @return this\n   */\n  public timestamp(value: string | number | Date | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger new logger\n * @return previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return Math.min(\n        delay + Math.round(Math.random() * this.options.retryJitter),\n        this.options.maxRetryDelay\n      )\n    } else {\n      if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * 2, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy\n * @param options retry options\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to influx DB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error)\n              )\n              reject(error)\n            } else {\n              Logger.error(`Write to influx DB failed.`, error)\n              reject(error)\n            }\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(): Promise<void> {\n    await this.writeBuffer.flush()\n    return await this.retryBuffer.flush()\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): void {\n    this._clearFlushTimeout()\n    this.closed = true\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../../transport'\nimport {Buffer} from 'buffer'\n\nconst nodeChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    return Buffer.concat([first, second])\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    return (chunk as Buffer).toString('utf-8', start, end)\n  },\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = Buffer.allocUnsafe(end - start)\n    ;(chunk as Buffer).copy(retVal, 0, start, end)\n    return retVal\n  },\n}\n\nexport default nodeChunkCombiner\n","export const CLIENT_LIB_VERSION = '1.3.0'\n","import {ConnectionOptions, DEFAULT_ConnectionOptions} from '../../options'\nimport {parse} from 'url'\nimport * as http from 'http'\nimport * as https from 'https'\nimport {Buffer} from 'buffer'\nimport {RequestTimedOutError, AbortError, HttpError} from '../../errors'\nimport {\n  CommunicationObserver,\n  Transport,\n  SendOptions,\n  Headers,\n  ChunkCombiner,\n} from '../../transport'\nimport Cancellable from '../../util/Cancellable'\nimport nodeChunkCombiner from './nodeChunkCombiner'\nimport zlib from 'zlib'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {CLIENT_LIB_VERSION} from '../version'\n\nconst zlibOptions = {\n  flush: zlib.Z_SYNC_FLUSH,\n  finishFlush: zlib.Z_SYNC_FLUSH,\n}\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nclass CancellableImpl implements Cancellable {\n  private cancelled = false\n  cancel(): void {\n    this.cancelled = true\n  }\n  isCancelled(): boolean {\n    return this.cancelled\n  }\n}\n\n/**\n * Transport layer on top of node http or https library.\n */\nexport class NodeHttpTransport implements Transport {\n  /* required transport member */\n  readonly chunkCombiner: ChunkCombiner = nodeChunkCombiner\n\n  private defaultOptions: {[key: string]: any}\n  private requestApi: (\n    options: http.RequestOptions,\n    callback: (res: http.IncomingMessage) => void\n  ) => http.ClientRequest\n  /**\n   * Creates a node transport using for the client options supplied.\n   * @param connectionOptions client options\n   */\n  constructor(private connectionOptions: ConnectionOptions) {\n    const url = parse(connectionOptions.url)\n    this.defaultOptions = {\n      ...DEFAULT_ConnectionOptions,\n      ...connectionOptions,\n      ...connectionOptions.transportOptions,\n      port: url.port,\n      protocol: url.protocol,\n      hostname: url.hostname,\n    }\n    if (url.protocol === 'http:') {\n      this.requestApi = http.request\n    } else if (url.protocol === 'https:') {\n      this.requestApi = https.request\n    } else {\n      throw new Error(\n        `Unsupported protocol \"${url.protocol} in URL: \"${connectionOptions.url}\"`\n      )\n    }\n  }\n\n  /**\n   * Sends data to server and receives communication events via communication callbacks.\n   *\n   * @param path HTTP path\n   * @param body  message body\n   * @param headers HTTP headers\n   * @param method HTTP method\n   * @param callbacks communication callbacks\n   * @return a handle that can cancel the communication\n   */\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const message = this.createRequestMessage(path, body, options)\n    const cancellable = new CancellableImpl()\n    if (callbacks && callbacks.useCancellable)\n      callbacks.useCancellable(cancellable)\n    this._request(message, cancellable, callbacks)\n  }\n\n  /**\n   * Sends data to the server and receives decoded result. The type of the result depends on\n   * response's content-type (deserialized json, text).\n  \n   * @param path HTTP path\n   * @param requestBody  request body\n   * @param options  send options\n   */\n  request(path: string, body: any, options: SendOptions): Promise<any> {\n    if (!body) {\n      body = ''\n    } else if (typeof body !== 'string') {\n      body = JSON.stringify(body)\n    }\n    let buffer = emptyBuffer\n    let contentType: string\n    return new Promise((resolve, reject) => {\n      this.send(path, body as string, options, {\n        responseStarted(headers: Headers) {\n          contentType = String(headers['content-type'])\n        },\n        next: (data: Uint8Array): void => {\n          buffer = Buffer.concat([buffer, data])\n        },\n        complete: (): void => {\n          try {\n            if (contentType.includes('json')) {\n              resolve(JSON.parse(buffer.toString('utf8')))\n            } else if (contentType.includes('text')) {\n              resolve(buffer.toString('utf8'))\n            } else {\n              resolve(buffer)\n            }\n          } catch (e) {\n            reject(e)\n          }\n        },\n        error: (e: Error): void => {\n          reject(e)\n        },\n      })\n    })\n  }\n\n  /**\n   * Creates configuration for a specific request.\n   *\n   * @param path API path starting with '/' and containing also query parameters\n   * @param headers HTTP headers to use\n   * @param method HTTP method\n   * @param body request body, will be utf-8 encoded\n   * @return configuration suitable for making the request\n   */\n  private createRequestMessage(\n    path: string,\n    body: string,\n    sendOptions: SendOptions\n  ): {[key: string]: any} {\n    const bodyBuffer = Buffer.from(body, 'utf-8')\n    const headers: {[key: string]: any} = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      headers.authorization = 'Token ' + this.connectionOptions.token\n    }\n    const options: {[key: string]: any} = {\n      ...this.defaultOptions,\n      path,\n      method: sendOptions.method,\n      headers: {\n        ...headers,\n        ...sendOptions.headers,\n      },\n      body: bodyBuffer,\n    }\n    options.headers['content-length'] = bodyBuffer.length\n\n    return options\n  }\n\n  private _request(\n    requestMessage: {[key: string]: any},\n    cancellable: CancellableImpl,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const listeners = completeCommunicationObserver(callbacks)\n    if (cancellable.isCancelled()) {\n      listeners.complete()\n      return\n    }\n    const req = this.requestApi(requestMessage, (res: http.IncomingMessage) => {\n      if (cancellable.isCancelled()) {\n        res.resume()\n        listeners.complete()\n        return\n      }\n      res.on('aborted', () => {\n        listeners.error(new AbortError())\n      })\n      listeners.responseStarted(res.headers)\n      const statusCode =\n        res.statusCode || /* istanbul ignore next safety check */ 600\n      const contentEncoding = res.headers['content-encoding']\n      let responseData\n      if (contentEncoding === 'gzip') {\n        responseData = zlib.createGunzip(zlibOptions)\n        res.pipe(responseData)\n      } else {\n        responseData = res\n      }\n      responseData.on('error', listeners.error)\n      if (statusCode >= 300) {\n        let body = ''\n        responseData.on('data', s => {\n          body += s.toString()\n          if (body.length > 1000) {\n            body = body.slice(0, 1000)\n            res.resume()\n          }\n        })\n        responseData.on('end', () =>\n          listeners.error(\n            new HttpError(\n              statusCode,\n              res.statusMessage,\n              body,\n              res.headers['retry-after']\n            )\n          )\n        )\n      } else {\n        responseData.on('data', data => {\n          if (cancellable.isCancelled()) {\n            res.resume()\n          } else {\n            listeners.next(data)\n          }\n        })\n        responseData.on('end', listeners.complete)\n      }\n    })\n    // Support older Nodes which don't allow .timeout() in the\n    // request options\n    /* istanbul ignore else support older node versions */\n    if (typeof req.setTimeout === 'function') {\n      req.setTimeout(requestMessage.timeout)\n    }\n\n    req.on('timeout', () => {\n      listeners.error(new RequestTimedOutError())\n    })\n    req.on('error', error => {\n      listeners.error(error)\n    })\n    req.on('close', listeners.complete)\n\n    /* istanbul ignore else support older node versions */\n    if (requestMessage.body) {\n      req.write(requestMessage.body)\n    }\n    req.end()\n  }\n}\nexport default NodeHttpTransport\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   * @param line\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line line\n   * @return\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(query: string, consumer: CommunicationObserver<string>): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(query: string, consumer: FluxResultObserver<string[]>): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  private createExecutor(query: string): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query,\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type || 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 client that uses HTTP API described in https://v2.docs.influxdata.com/v2.0/reference/api/ .\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport || new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates [[WriteApi]] for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket The destination bucket for writes.\n   * @param precision Timestamp precision for line items.\n   * @param writeOptions Custom write options.\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions || this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates [[QueryAPI]] for the supplied organization .\n   *\n   * @param org organization\n   * @return query api instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n"],"names":["DEFAULT_ConnectionOptions","timeout","DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","DEFAULT_WriteOptions","batchSize","flushInterval","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","[object Object]","message","super","setPrototypeOf","this","prototype","HttpError","statusMessage","body","retryAfter","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","canRetryHttpCall","error","canRetry","code","getRetryDelay","retVal","Math","round","random","RequestTimedOutError","AbortError","name","reEscape","Escaper","chars","wrap","patterns","join","replace","_re","RegExp","val","lastIndex","chunkIndex","escapedVal","match","exec","slice","index","length","bindEsc","e","escape","bind","measurement","quoted","tag","useHrTime","useProcessHrtime","use","process","hrtime","startHrMillis","undefined","startHrTime","lastMillis","Date","now","stepsInMillis","nanos","hrTime","millis","floor","String","substr","micros","trunc","seconds","currentTime","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","dateTime","duration","FluxTableMetaData","columns","forEach","col","i","label","values","acc","column","defaultValue","dataType","FluxTableColumn","object","group","Boolean","Point","measurementName","value","tags","fields","isNaN","parseFloat","time","settings","fieldsLine","keys","sort","tagsLine","defaultTags","convertTime","line","toLineProtocol","JSON","stringify","provider","console","warn","Logger","RetryStrategyImpl","options","success","delay","min","currentDelay","max","RetryBuffer","maxLines","retryLines","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","Array","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","attempts","self","reject","send","sendOptions","addLines","nextDelay","add","records","point","points","writePoint","finally","remaining","close","key","nodeChunkCombiner","concat","second","Buffer","toUtf8String","chunk","start","end","toString","allocUnsafe","copy","zlibOptions","zlib","Z_SYNC_FLUSH","finishFlush","emptyBuffer","CancellableImpl","cancelled","NodeHttpTransport","connectionOptions","url","parse","defaultOptions","transportOptions","port","protocol","hostname","requestApi","http.request","https.request","path","callbacks","createRequestMessage","cancellable","useCancellable","_request","contentType","buffer","data","complete","bodyBuffer","from","User-Agent","token","authorization","requestMessage","listeners","state","responseStarted","completeCommunicationObserver","isCancelled","req","res","resume","on","responseData","createGunzip","pipe","s","write","ChunksToLines","target","chunks","finished","bufferReceived","previous","c","LineSplitter","reuse","_reuse","reusedValues","lastSplitLength","quoteCount","startIndex","count","getValue","push","substring","toLineObserver","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","startsWith","symbolObservable","Symbol","observable","QuerySubscription","observer","executor","isClosed","cancel","noop","ObservableQuery","decorator","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","tableMeta","type","gzip","decorateRequest","dialect","accept-encoding","chunkCombiner","request","InfluxDB","_options","endsWith","TransportImpl"],"mappings":"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"}