{"version":3,"file":"index.browser.js","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/pureJsChunkCombiner.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/observable/symbol.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts","../src/Point.ts"],"sourcesContent":["import {Transport} from './transport'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write  */\n  minRetryDelay: number\n  /** maximum delay when retrying write  */\n  maxRetryDelay: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by [[WriteApi]] .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 1000,\n  maxRetryDelay: 15000,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  maxRetries: 2,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by [[InfluxDB]] .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a [[Point]] is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error reason for retrying\n   * @return milliseconds\n   */\n  nextDelay(error?: Error): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @return  0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error to know whether a possible HTTP call can be retried.\n * @param error Test whether the givver e\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(chars: string[], private wrap: string = '') {\n    const patterns = chars.join('').replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      escapedVal += val.slice(chunkIndex, match.index) + escapeChar + match[0]\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(new Escaper([',', ' '])),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(new Escaper(['\"', '\\\\\\\\'], '\"')),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(new Escaper([',', '=', ' '])),\n}\n","import {WritePrecision} from '../options'\n\ndeclare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  [String(WritePrecision.s)]: seconds,\n  [String(WritePrecision.ms)]: millis,\n  [String(WritePrecision.us)]: micros,\n  [String(WritePrecision.ns)]: nanos,\n  seconds,\n  millis,\n  micros,\n  nanos,\n})\n\nexport const dateToProtocolTimestamp = {\n  [String(WritePrecision.s)]: (d: Date): string =>\n    `${Math.floor(d.getTime() / 1000)}`,\n  [String(WritePrecision.ms)]: (d: Date): string => `${d.getTime()}`,\n  [String(WritePrecision.us)]: (d: Date): string => `${d.getTime()}000`,\n  [String(WritePrecision.ns)]: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: identity,\n  long: identity,\n  double: (x: string): any => +x,\n  string: identity,\n  base64Binary: identity,\n  dateTime: identity,\n  duration: identity,\n}\n/**\n * Represents metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label table column or [[invalidColumn]]\n   */\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values values for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] || identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   * @return index\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue || ''\n    return retVal\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger new logger\n * @return previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return Math.min(\n        delay + Math.round(Math.random() * this.options.retryJitter),\n        this.options.maxRetryDelay\n      )\n    } else {\n      if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * 2, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy\n * @param options retry options\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to influx DB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error)\n              )\n              reject(error)\n            } else {\n              Logger.error(`Write to influx DB failed.`, error)\n              reject(error)\n            }\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(): Promise<void> {\n    await this.writeBuffer.flush()\n    return await this.retryBuffer.flush()\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): void {\n    this._clearFlushTimeout()\n    this.closed = true\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../transport'\n\nconst pureJsChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    const retVal = new Uint8Array(first.length + second.length)\n    retVal.set(first)\n    retVal.set(second, first.length)\n    return retVal\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    // see https://en.wikipedia.org/wiki/UTF-8 for details\n    let c1, c2, c3, c4\n    let out = ''\n    let i = start\n    while (i < end) {\n      c1 = chunk[i++]\n      switch (c1 >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c1)\n          break\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          c2 = chunk[i++]\n          out += String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f))\n          break\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          out += String.fromCharCode(\n            ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)\n          )\n          break\n        case 15:\n          // 1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          c4 = chunk[i++]\n          out += String.fromCodePoint(\n            ((c1 & 0x07) << 18) |\n              ((c2 & 0x3f) << 12) |\n              ((c3 & 0x3f) << 6) |\n              (c4 & 0x3f)\n          )\n          break\n      }\n    }\n    return out\n  },\n\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = new Uint8Array(end - start)\n    retVal.set(chunk.slice(start, end))\n    return retVal\n  },\n}\n\nexport default pureJsChunkCombiner\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Transport,\n  SendOptions,\n  CommunicationObserver,\n  Headers,\n} from '../../transport'\nimport pureJsChunkCombiner from '../pureJsChunkCombiner'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport Logger from '../Logger'\nimport {CLIENT_LIB_VERSION} from '../version'\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner = pureJsChunkCombiner\n  private defaultHeaders: {[key: string]: string}\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    if (callbacks && callbacks.useCancellable && !(options as any).signal) {\n      const controller = new AbortController()\n      const signal = controller.signal\n      callbacks.useCancellable({\n        cancel() {\n          controller.abort()\n        },\n        isCancelled() {\n          return signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          const headers: Headers = {}\n          response.headers.forEach((value: string, key: string) => {\n            const previous = headers[key]\n            if (previous === undefined) {\n              headers[key] = value\n            } else if (Array.isArray(previous)) {\n              previous.push(value)\n            } else {\n              headers[key] = [previous, value]\n            }\n          })\n          observer.responseStarted(headers)\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => observer.error(e))\n      .finally(() => observer.complete())\n  }\n  async request(path: string, body: any, options: SendOptions): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n\n    let data = undefined\n    try {\n      if (responseContentType.includes('json')) {\n        data = await response.json()\n      } else if (responseContentType.includes('text')) {\n        data = await response.text()\n      }\n    } catch (_e) {\n      // ignore\n      Logger.warn('Unable to read error body', _e)\n    }\n    if (status >= 300) {\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after')\n      )\n    }\n    return data\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    return fetch(`${this.connectionOptions.url}${path}`, {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    })\n  }\n}\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   * @param line\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line line\n   * @return\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(query: string, consumer: CommunicationObserver<string>): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(query: string, consumer: FluxResultObserver<string[]>): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  private createExecutor(query: string): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query,\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type || 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 client that uses HTTP API described in https://v2.docs.influxdata.com/v2.0/reference/api/ .\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport || new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates [[WriteApi]] for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket The destination bucket for writes.\n   * @param precision Timestamp precision for line items.\n   * @param writeOptions Custom write options.\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions || this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates [[QueryAPI]] for the supplied organization .\n   *\n   * @param org organization\n   * @return query api instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines the values that will be written to the database.\n * See [Go Implementation](http://bit.ly/influxdata-point)\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName the measurement name\n   * @return new instance of {@link Point}\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name measurement name\n   * @return new instance of {@link Point}\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name  tag name\n   * @param value tag value\n   * @return this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field field name\n   * @param value field value\n   * @return this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value is used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value point time\n   * @return this\n   */\n  public timestamp(value: string | number | Date | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n"],"names":["DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","DEFAULT_WriteOptions","batchSize","flushInterval","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","[object Object]","message","super","setPrototypeOf","this","prototype","HttpError","statusMessage","body","retryAfter","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","error","retVal","Math","round","random","RequestTimedOutError","AbortError","name","reEscape","Escaper","chars","wrap","patterns","join","replace","_re","RegExp","val","lastIndex","chunkIndex","escapedVal","match","exec","slice","index","length","bindEsc","e","escape","bind","measurement","quoted","tag","lastMillis","Date","now","stepsInMillis","nanos","millis","String","substr","micros","seconds","floor","currentTime","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","dateTime","duration","FluxTableMetaData","columns","forEach","col","i","label","values","acc","column","defaultValue","dataType","FluxTableColumn","object","group","Boolean","provider","console","warn","Logger","RetryStrategyImpl","options","success","delay","min","currentDelay","max","undefined","RetryBuffer","maxLines","retryLines","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","Array","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","attempts","self","reject","send","sendOptions","addLines","nextDelay","add","records","point","line","toLineProtocol","points","writePoint","finally","remaining","close","tags","defaultTags","keys","key","value","pureJsChunkCombiner","second","Uint8Array","set","chunk","start","end","c1","c2","c3","c4","out","fromCharCode","fromCodePoint","FetchTransport","connectionOptions","defaultHeaders","User-Agent","token","path","callbacks","observer","state","data","complete","responseStarted","completeCommunicationObserver","useCancellable","signal","controller","AbortController","abort","isCancelled","aborted","fetch","response","previous","isArray","push","status","text","statusText","get","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","responseContentType","json","other","url","JSON","stringify","credentials","ChunksToLines","target","chunks","finished","bufferReceived","toUtf8String","cancellable","concat","c","copy","LineSplitter","reuse","_reuse","reusedValues","lastSplitLength","quoteCount","startIndex","count","getValue","substring","toLineObserver","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","startsWith","symbolObservable","Symbol","observable","QuerySubscription","executor","isClosed","cancel","noop","ObservableQuery","decorator","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","tableMeta","type","gzip","decorateRequest","dialect","accept-encoding","chunkCombiner","request","timeout","_options","endsWith","TransportImpl","measurementName","fields","isNaN","parseFloat","time","settings","fieldsLine","sort","tagsLine","convertTime","canRetry","code","use"],"mappings":"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"}